Index: gnome-shell-3.4.2/js/ui/status/network.js
===================================================================
--- gnome-shell-3.4.2.orig/js/ui/status/network.js	2013-01-15 00:12:14.109789321 +0100
+++ gnome-shell-3.4.2/js/ui/status/network.js	2013-01-15 00:12:14.101789249 +0100
@@ -97,6 +97,11 @@
     return label;
 }
 
+function default_to_private_connections(client) {
+    let perms = client.get_permission_result (NMClient.ClientPermission.SETTINGS_MODIFY_SYSTEM);
+    return (perms != NMClient.ClientPermissionResult.YES);
+}
+
 const NMNetworkMenuItem = new Lang.Class({
     Name: 'NMNetworkMenuItem',
     Extends: PopupMenu.PopupBaseMenuItem,
@@ -863,12 +868,14 @@
         let connection = new NetworkManager.Connection;
         let uuid = NetworkManager.utils_uuid_generate();
         connection.add_setting(new NetworkManager.SettingBluetooth);
-        connection.add_setting(new NetworkManager.SettingConnection({
+        let setting_conn = new NetworkManager.SettingConnection({
             uuid: uuid,
             id: this._autoConnectionName,
             type: NetworkManager.SETTING_BLUETOOTH_SETTING_NAME,
             autoconnect: false
-        }));
+        });
+        setting_conn.add_permission('user', GLib.get_user_name(), null);
+        connection.add_setting(setting_conn);
         return connection;
     },
 
@@ -949,6 +956,8 @@
         this._overflowItem = null;
         this._networks = [ ];
 
+        this._client = client;
+
         // breaking the layers with this, but cannot call
         // this.connectionValid until I have a device
         this.device = device;
@@ -1452,12 +1461,22 @@
 
         let connection = new NetworkManager.Connection();
         connection.add_setting(new NetworkManager.SettingWireless());
-        connection.add_setting(new NetworkManager.SettingConnection({
+        let setting_conn = new NetworkManager.SettingConnection({
             id: name,
             autoconnect: true, // NetworkManager will know to ignore this if appropriate
             uuid: NetworkManager.utils_uuid_generate(),
             type: NetworkManager.SETTING_WIRELESS_SETTING_NAME
-        }));
+        });
+        if (default_to_private_connections(this._client)) {
+            setting_conn.add_permission('user', GLib.get_user_name(), null);
+            if (apObj.security == NMAccessPointSecurity.WPA2_PSK ||
+                apObj.security == NMAccessPointSecurity.WPA_PSK) {
+                connection.add_setting(new NetworkManager.SettingWirelessSecurity({
+                    psk_flags: NetworkManager.SettingSecretFlags.AGENT_OWNED
+                }));
+            }
+        }
+        connection.add_setting(setting_conn);
         return connection;
     },
 
