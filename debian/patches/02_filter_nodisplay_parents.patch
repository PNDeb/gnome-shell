From df56ff4f097ab4109a40fc928199abfe6511a4b7 Mon Sep 17 00:00:00 2001
From: Jasper St. Pierre <jstpierre@mecheye.net>
Date: Tue, 19 Jun 2012 15:35:05 +0000
Subject: app-system: Don't show items with NoDisplay parents in the search

Additionally, require gnome-menus 3.5.3, as we're using new API
introduced there.

https://bugzilla.gnome.org/show_bug.cgi?id=658176
---
Index: gnome-shell-3.4.2/src/shell-app-system.c
===================================================================
--- gnome-shell-3.4.2.orig/src/shell-app-system.c	2013-01-15 00:14:42.315123568 +0100
+++ gnome-shell-3.4.2/src/shell-app-system.c	2013-01-15 00:14:42.307123496 +0100
@@ -46,6 +46,7 @@
   GMenuTree *apps_tree;
 
   GHashTable *running_apps;
+  GHashTable *visible_id_to_app;
   GHashTable *id_to_app;
 
   GSList *known_vendor_prefixes;
@@ -97,14 +98,16 @@
   priv->id_to_app = g_hash_table_new_full (g_str_hash, g_str_equal,
                                            NULL,
                                            (GDestroyNotify)g_object_unref);
+
+  /* All the objects in this hash table are owned by id_to_app */
+  priv->visible_id_to_app = g_hash_table_new (g_str_hash, g_str_equal);
+
   priv->setting_id_to_app = g_hash_table_new_full (g_str_hash, g_str_equal,
                                                    NULL,
                                                    (GDestroyNotify)g_object_unref);
 
-  /* For now, we want to pick up Evince, Nautilus, etc.  We'll
-   * handle NODISPLAY semantics at a higher level or investigate them
-   * case by case.
-   */
+  /* We want to track NoDisplay apps, so we add INCLUDE_NODISPLAY. We'll
+   * filter NoDisplay apps out when showing them to the user. */
   priv->apps_tree = gmenu_tree_new ("applications.menu", GMENU_TREE_FLAGS_INCLUDE_NODISPLAY);
   g_signal_connect (priv->apps_tree, "changed", G_CALLBACK (on_apps_tree_changed_cb), self);
 
@@ -126,6 +129,7 @@
 
   g_hash_table_destroy (priv->running_apps);
   g_hash_table_destroy (priv->id_to_app);
+  g_hash_table_destroy (priv->visible_id_to_app);
   g_hash_table_destroy (priv->setting_id_to_app);
 
   g_slist_free_full (priv->known_vendor_prefixes, g_free);
@@ -313,6 +317,7 @@
 
   g_assert (tree == self->priv->apps_tree);
 
+  g_hash_table_remove_all (self->priv->visible_id_to_app);
   g_slist_free_full (self->priv->known_vendor_prefixes, g_free);
   self->priv->known_vendor_prefixes = NULL;
 
@@ -374,6 +379,8 @@
        * string is pointed to.
        */
       g_hash_table_replace (self->priv->id_to_app, (char*)id, app);
+      if (!gmenu_tree_entry_get_is_nodisplay_recurse (entry))
+        g_hash_table_replace (self->priv->visible_id_to_app, (char*)id, app);
 
       if (old_entry)
         gmenu_tree_item_unref (old_entry);
@@ -771,7 +778,7 @@
 shell_app_system_initial_search (ShellAppSystem  *self,
                                  GSList          *terms)
 {
-  return search_tree (self, terms, self->priv->id_to_app);
+  return search_tree (self, terms, self->priv->visible_id_to_app);
 }
 
 /**
