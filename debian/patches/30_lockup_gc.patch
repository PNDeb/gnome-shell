Index: gnome-shell-3.4.2/src/shell-global.c
===================================================================
--- gnome-shell-3.4.2.orig/src/shell-global.c	2013-06-19 23:42:05.465262116 +0200
+++ gnome-shell-3.4.2/src/shell-global.c	2013-06-20 00:55:59.838940666 +0200
@@ -45,6 +45,7 @@ static ShellGlobal *the_object = NULL;
 static void grab_notify (GtkWidget *widget, gboolean is_grab, gpointer user_data);
 static void shell_global_on_gc (GjsContext   *context,
                                 ShellGlobal  *global);
+static gboolean on_gc_timeout (gpointer data);
 
 struct _ShellGlobal {
   GObject parent;
@@ -92,6 +93,8 @@ struct _ShellGlobal {
   guint32 xdnd_timestamp;
 
   gint64 last_gc_end_time;
+  guint gc_timer;
+  gboolean gc_timer_first;
 };
 
 enum {
@@ -277,8 +280,19 @@ shell_global_init (ShellGlobal *global)
                                      "js-version", "1.8",
                                      "gc-notifications", TRUE,
                                      NULL);
+
   g_signal_connect (global->js_context, "gc", G_CALLBACK (shell_global_on_gc), global);
 
+  /* Since the GC has a tendency to deadlock, only run it once every 10
+     minutes or so. */
+  global->gc_timer = g_timeout_add_seconds (600, on_gc_timeout, global);
+
+  /* Since it can deadlock more easily the first time, run it once right
+     after startup, so that it locks up soon and not after 10 minutes worth
+     of work. */
+  global->gc_timer_first = TRUE;
+  g_timeout_add_seconds (15, on_gc_timeout, global);
+
   g_strfreev (search_path);
 }
 
@@ -1605,13 +1619,6 @@ run_leisure_functions (gpointer data)
   if (global->work_count > 0)
     return FALSE;
 
-  /* Previously we called gjs_maybe_gc().  However, it simply doesn't
-   * trigger often enough.  Garbage collection is very fast here, so
-   * let's just aggressively GC.  This will help avoid both heap
-   * fragmentation, and the GC kicking in when we don't want it to.
-   */
-  gjs_context_gc (global->js_context);
-
   /* No leisure closures, so we are done */
   if (global->leisure_closures == NULL)
     return FALSE;
@@ -1635,6 +1642,21 @@ run_leisure_functions (gpointer data)
   return FALSE;
 }
 
+static gboolean
+on_gc_timeout (gpointer data)
+{
+  ShellGlobal *global = data;
+  gjs_context_gc (global->js_context);
+
+  if (global->gc_timer_first) {
+    /* The first time, the timeout is much shorter; do it only once */
+    global->gc_timer_first = FALSE;
+    return FALSE;
+  }
+  return TRUE;
+}
+
+
 static void
 schedule_leisure_functions (ShellGlobal *global)
 {
